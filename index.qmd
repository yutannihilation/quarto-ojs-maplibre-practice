---
title: "Using MapLibre on Quarto OJS"
format: html
---

Disclaimer: I'm poor at JavaScript!

## References

* [Hello MapLibre / Nicolas Lambert | Observable](https://observablehq.com/@neocartocnrs/hello-maplibre)
* [【初級編】MapLibre GL JSを使ったWebGIS作成](https://zenn.dev/asahina820/books/c29592e397a35b)

## Setup

Load MapLibre library.

```{ojs}
maplibregl = require("maplibre-gl@4.3.2")
```

Load CSS.

```{ojs}
html`<link href='https://unpkg.com/maplibre-gl@4.3.2/dist/maplibre-gl.css' rel='stylesheet' />`
```

## Basic usage

```{ojs}
Japan = {
    const container = yield html`<div style="height:400px;">`;
    const map = (container.value = new maplibregl.Map({
        container,
        style: 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
        center: [139.7024, 35.6598],
        zoom: 16,
    }));
}
```

## Pass simple data from R

Define the marker location on R's side.

```{r}
markers <- tibble::tibble(
    long = 139.70356,
    lat = 35.65901,
    popup = list(
        list(options = list(offset = 25L, closeButton = FALSE), title = "渋谷ヒカリエ")
    )
)

# Make this data available to OJS
ojs_define(markers)
```

```{ojs}
Japan_with_marker = {
    const container = yield html`<div style="height:400px;">`;
    const map = (container.value = new maplibregl.Map({
        container,
        style: 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
        center: [139.7024, 35.6598],
        zoom: 16,
    }));

    map.on('load', async () => {
        transpose(markers).map((m) => {
            var popup = new maplibregl.Popup(m.popup.options).setText(m.popup.title);
            var loc = [m.long, m.lat];
            var tmp = new maplibregl.Marker().setLngLat(loc).setPopup(popup).addTo(map);
        });
    })
}
```

## Pass Geospatial data (Point)

**国土交通省国土数値情報ダウンロードサイト（<https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-P27.html>）のデータを加工して作成**

```{r}
#| warning: false
#| eval: !expr '!file.exists("data/point.geojson")'
library(sf)

d <- read_sf("data-raw/P27-13_13/")

d |>
  dplyr::select(name = P27_005) |>
  write_sf("data/point.geojson")
```

```{ojs}
Japan_geojson_point = {
    const container = yield html`<div style="height:400px;">`;
    const map = (container.value = new maplibregl.Map({
        container,
        style: 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
        center: [139.7024, 35.6598],
        zoom: 13,
    }));

    map.on('load', async () => {
        const iconImage = await map.loadImage('./images/icon.png');
        map.addImage('facility_icon', iconImage.data);
        map.addSource('facility_point', {
            type: 'geojson',
            data: './data/point.geojson',
        });
        map.addLayer({
            id: 'facility_point',
            type: 'symbol',
            source: 'facility_point',
            layout: {
                'icon-image': 'facility_icon',
                'icon-size': 0.1,
            },
        });
    });

    map.on('click', 'facility_point', (e) => {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var name = e.features[0].properties.name;

        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        new maplibregl.Popup({
            offset: 10,
            closeButton: false,
        })
            .setLngLat(coordinates)
            .setHTML(name)
            .addTo(map);
    });
}
```

## Pass Geospatial data (Line)

**国土交通省国土数値情報ダウンロードサイト（<https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N07.html>）のデータを加工して作成**

```{r}
#| warning: false
#| eval: !expr '!file.exists("data/line.geojson")'
library(sf)

d <- read_sf("data-raw/N07-11_13_GML/", options = "ENCODING=CP932")
st_crs(d) <- 4612L

center <- st_sfc(
  st_point(c(139.7024, 35.6598)),
  crs = 4612L
)

d |>
  dplyr::select(company = N07_002) |>
  # 重すぎるので、ざっくり1km以内にかかっているものに絞る
  dplyr::filter(
    sf::st_distance(geometry, {{ center }}) < units::set_units(1, km)
  ) |>
  write_sf("data/line.geojson")
```

```{ojs}
Japan_geojson_line = {
    const container = yield html`<div style="height:400px;">`;
    const map = (container.value = new maplibregl.Map({
        container,
        style: 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
        center: [139.7024, 35.6598],
        zoom: 13,
    }));

    map.on('load', async () => {
        map.addSource('tokyo_bus', {
            type: 'geojson',
            data: './data/line.geojson',
        });
        map.addLayer({
            id: 'tokyo_bus',
            type: 'line',
            source: 'tokyo_bus',
            layout: {
                'line-join': 'round',
                'line-cap': 'round',
            },
            paint: {
                'line-color': '#0067c0',
                'line-width': 5,
            },
            filter: ['==', 'company', '都営バス'],
        });
    });
}
```

## Pass Geospatial data (Polygon)

**国土交通省国土数値情報ダウンロードサイト（<https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-L05.html>）のデータを加工して作成**

```{r}
#| warning: false
#| eval: !expr '!file.exists("data/polygon.geojson")'
library(sf)

prepare <- \(x) {
  x |>
  dplyr::select(area = L05_002) |>
  `st_crs<-`(4612L)
}

d1 <- read_sf("data-raw/L05-1-09_13_GML/")
d2 <- read_sf("data-raw/L05-2-09_13_GML/")
d <- rbind(
  prepare(d1),
  prepare(d2)
)

d |>
  write_sf("data/polygon.geojson")
```

```{ojs}
Japan_geojson_polygon = {
    const container = yield html`<div style="height:400px;">`;
    const map = (container.value = new maplibregl.Map({
        container,
        style: 'https://tile.openstreetmap.jp/styles/osm-bright-ja/style.json',
        center: [139.7024, 35.6598],
        zoom: 13,
    }));

    map.on('load', async () => {
        map.addSource('industrial_area', {
            type: 'geojson',
            data: './data/polygon.geojson',
        });
        map.addLayer({
            id: 'industrial_area',
            type: 'fill',
            source: 'industrial_area',
            layout: {},
            paint: {
            'fill-color': '#FD7E00',
            'fill-opacity': 0.8,
            },
        });
    });

    map.on('click', 'industrial_area', (e) => {
        var name = e.features[0].properties.area;
        new maplibregl.Popup({
            closeButton: false,
        })
            .setLngLat(e.lngLat)
            .setHTML(name)
            .addTo(map);
    });
}
```





